#!/usr/bin/env bash

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

. "${SCRIPT_DIR}/io_utils"
. "${SCRIPT_DIR}/git_utils"

function main(){
  declare -A options
  options["--tag"]="The tag to delete. Latest tag is used as default."
  options["--batch"]="All questions will be answered with the default answer."

  local arguments=($@)

  declare -A args
  parseArgs args options arguments
  if [ $? -ne 0 ]; then
    printHelp $(basename $0) options
  fi

  local defaultAnswer=""
  if [ "${args["batch"]}" == "true" ]; then
    defaultAnswer="y"
  fi

  declare tagToDelete
  if [ ! -z "${args["tag"]}"  ]; then
    if ! (git tag | grep "${args["tag"]}") > /dev/null; then
      echo "Tag "${args["tag"]}" does not exist."
      exit 1
    fi
    tagToDelete="${args["tag"]}"
  else
    tagToDelete=$(latestTag)
  fi

  declare answer
  local confirmationOptions=(y n)

  if ! git status -u no --porcelain; then
    local ignoreChangedFiles=""
    if [ "${args["batch"]}" == "true" ]; then
      ignoreChangedFiles="n"
    fi
    confirmation "Your local changes might be overridden. Do you want to continue?" confirmationOptions answer "$ignoreChangedFiles"
    if [ "$answer" == "n" ]; then
      echo "Aborting due to local git changes."
      exit 1
    fi
  fi

  local tagToDeleteId=$(git rev-parse $tagToDelete)
  confirmation "Do you want to delete tag '$tagToDelete'?" confirmationOptions answer "$defaultAnswer"
  if [ "$answer" == "n" ]; then exit 1; fi

  local current_branch=$(git rev-parse --abbrev-ref HEAD)
  local current_branch_commit_id=$(git rev-parse $current_branch)
  echo "Current branch at $current_branch_commit_id"
  (
    git checkout --detach HEAD
    local cherry_pick_start=$( git rev-list --grep="new version" $tagToDelete..HEAD)
    local cherry_pick=$(git --no-pager log --pretty=oneline  $cherry_pick_start..HEAD)

    git reset --hard $tagToDelete^

    if [ ! -z "${cherry_pick}" ]; then
      echo "Found commits after the latest release ${tagToDelete} to cherry-pick:"
      cat <<<$cherry_pick

      confirmation "Do you want cherry-pick them?" confirmationOptions answer "$defaultAnswer"
      if [ "$answer" == "n" ]; then exit 1; fi

      while read -r commit
      do
        if ! git cherry-pick -m 1 --allow-empty ${commit}; then
          echo "Cherry-pick went wrong. Aborting..."
          exit 1
        fi
      done < <(tac <<<$cherry_pick | awk '{print $1}')
    fi

    git branch -f ${current_branch} HEAD
    git tag -d $tagToDelete
  )

  if [ $? -ne 0 ]; then
    git branch -f ${current_branch} ${current_branch_commit_id}
    git checkout ${current_branch}
    exit 1
  else
    echo "Rollback changes using:"
    echo " git checkout ${current_branch} "
    echo " git reset --hard ${current_branch_commit_id} "
    echo " git tag $tagToDelete $tagToDeleteId"

    git branch -f ${current_branch} HEAD
    git checkout ${current_branch}

    confirmation "Do you want to force push the changes?" confirmationOptions answer "$defaultAnswer"
    if [ "$answer" == "y" ]; then
      git push --delete origin "$tagToDelete"
      git push -f
    fi
  fi
}

main $*